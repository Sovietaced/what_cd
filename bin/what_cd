#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'logging'
require 'pathname'

require '../lib/what_cd'
require '../lib/what_cd/version'
require '../lib/what_cd/sanitize'
require '../lib/what_cd/better'
require '../lib/what_cd/metadata'
require '../lib/what_cd/make_torrent'


# :name is optional, otherwise uses the basename of this executable
program :name, 'WHAT.CD'
program :version, WhatCD::VERSION
program :description, 'WHAT.CD tools'

global_option('--verbose') { $verbose = true }

command :sanitize do |c|
  c.syntax = 'what_cd sanitize [dir]'
  c.description = 'Sanitizes releases'
  c.action do |args, options|
    # Preconditions
    raise ArgumentError.new("dir argument required") unless args.count > 0
    path = sanitize_path(args[0])
    Sanitize.run(path)
  end
end

command :metadata do |c|
  c.syntax = 'what_cd metadata [dir]'
  c.description = 'Gets release metadata for uploading'
  c.action do |args, options|
    # Preconditions
    raise ArgumentError.new("dir argument required") unless args.count > 0
    path = sanitize_path(args[0])
    Metadata.run(path)
  end
end

command :better do |c|
  c.syntax = 'what_cd better [args] [dir]'
  c.description = 'Converts FLAC releases to MP3'
  c.option '--quality [320/V0]', String, 'Specifies what quality MP3 to convert to'
  c.action do |args, options|
    # Preconditions
    raise ArgumentError.new("dir argument required") unless args.count > 0
    raise ArgumentError.new("quality option required") unless options.quality
    raise ArgumentError.new("specified quality invalid. Must be 320 or V0") unless options.quality == "320" || options.quality == "V0"
    path = sanitize_path(args[0])
    Better.run(path, options.quality, $verbose)
  end
end

command :make_torrent do |c|
  c.syntax = 'what_cd make_torrent [dir] [output dir]'
  c.description = 'Generates a torrent file from a dir for WHAT.CD'
  c.action do |args, options|
    # Preconditions
    raise ArgumentError.new("dir argument required") unless args.count > 0
    raise ArgumentError.new("output dir argument required") unless args.count > 1
    path = sanitize_path(args[0])
    output_path = sanitize_path(args[1])
    MakeTorrent.run(path, output_path, $verbose)
  end
end

def sanitize_path(path)

  if (Pathname.new(path).absolute?)
    return path
  else 
    return Dir.pwd + '/' + path
  end
end